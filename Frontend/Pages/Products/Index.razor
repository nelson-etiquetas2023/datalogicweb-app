@page "/Products/Index"
@using Shared.Model
@using System.Text.Json
@using Microsoft.AspNetCore.Components.QuickGrid    
@inject HttpClient httpClient
@inject NavigationManager navigator

<PageTitle>Products</PageTitle>
<h3>Products Page</h3>
<button class="btn btn-primary" style="margin-bottom:20px" @onclick="AddProducts">Add Products</button>
@if (products is null)
{
    <p>Cargando productos...</p>
}
else 
{
    <div class="search-container">
         <p>Search: </p> <input type="text" class="form-control" placeholder="search products..." id="txtbuscar"  />
         <button class="btn btn-primary">Search</button>
    </div>
    
    <QuickGrid
    Theme="corporate"
    Pagination="@pagination"
    Items="@products.AsQueryable()"
    ItemKey="@(x => x.Id )">
        <PropertyColumn Title="Id." Property="@(p => p.Id)" Sortable="true" />
        <PropertyColumn Title="Product Name" Property="@(p => p.ProductName)" Sortable="true" />
        <PropertyColumn Title="Price" Property="@(p => p.Price)" />
        <PropertyColumn Title="Category" Property="@(p => p.Category)" Sortable="true" />
        <PropertyColumn Title="Location" Property="@(p => p.Location)" Sortable="true" />
        <TemplateColumn Title="Acciones" Context="Product">
            <a href="@($"/products/details/{Product.Id}")">Details</a>
            <a href="@($"/products/update/{Product.Id}")">Update</a>
            <a href="@($"/products/delete/{Product.Id}")">Delete</a>
        </TemplateColumn>
</QuickGrid>

<Paginator State="@pagination" />
}

@code {
    public PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
    public static List<Product>? products = [];

    protected override async Task OnInitializedAsync()
    {
        products = await GetProducts();
    }

    public async Task<List<Product>> GetProducts()
    {
        try
        {
            var url = $"http://192.168.10.13:8080/api/products/getproducts";
            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var respoString = await response.Content.ReadAsStringAsync();
                products = JsonSerializer.Deserialize<List<Product>>(respoString, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
                return products!;
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine($"error : {ex.Message}");
        }
        return products!;
    }
    public void AddProducts()
    {
        navigator.NavigateTo("/Products/Create");
    }
}
